{"ast":null,"code":"var _jsxFileName = \"D:\\\\tyagi\\\\My Projects\\\\Me_Chat\\\\client\\\\src\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [user, setUser] = useState('');\n  const [message, setMessage] = useState('');\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/messages');\n      const data = await response.json();\n      setMessages(data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const sendMessage = async () => {\n    try {\n      await fetch('http://localhost:5000/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user,\n          message\n        })\n      });\n\n      // Clear the message input after sending\n      setMessage('');\n      setUser('');\n      // Fetch messages to update the list\n      fetchMessages();\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  useEffect(() => {\n    // Fetch messages on component mount\n    fetchMessages();\n    // Poll for new messages every 2 seconds\n    const interval = setInterval(() => {\n      fetchMessages();\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []); // Run only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [message.user, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), \" \", message.message]\n      }, message._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Your name\",\n        value: user,\n        onChange: e => setUser(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"vgIXI70xT3U40yO1Naxws4REG+Q=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChatRoom","_s","messages","setMessages","user","setUser","message","setMessage","fetchMessages","response","fetch","data","json","error","console","sendMessage","method","headers","body","JSON","stringify","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_id","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/tyagi/My Projects/Me_Chat/client/src/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ChatRoom = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [user, setUser] = useState('');\r\n    const [message, setMessage] = useState('');\r\n\r\n    const fetchMessages = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/messages');\r\n            const data = await response.json();\r\n            setMessages(data);\r\n        } catch (error) {\r\n            console.error('Error fetching messages:', error);\r\n        }\r\n    };\r\n\r\n    const sendMessage = async () => {\r\n        try {\r\n            await fetch('http://localhost:5000/messages', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ user, message }),\r\n            });\r\n\r\n            // Clear the message input after sending\r\n            setMessage('');\r\n            setUser('');\r\n            // Fetch messages to update the list\r\n            fetchMessages();\r\n        } catch (error) {\r\n            console.error('Error sending message:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Fetch messages on component mount\r\n        fetchMessages();\r\n        // Poll for new messages every 2 seconds\r\n        const interval = setInterval(() => {\r\n            fetchMessages();\r\n        }, 2000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []); // Run only once on mount\r\n\r\n    return (\r\n        <div>\r\n            <h2>Chat Room</h2>\r\n            <ul>\r\n                {messages.map((message) => (\r\n                    <li key={message._id}>\r\n                        <strong>{message.user}:</strong> {message.message}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Your name\"\r\n                    value={user}\r\n                    onChange={(e) => setUser(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Type your message...\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                />\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}